let generate_random_string,EVENTS,PURCHASED_TICKETS,TICKETS,VENDOR_EVENTS,save_image;_5cd‍.x([["create_event",()=>create_event],["vendor_events",()=>vendor_events],["events",()=>events]]);_5cd‍.w("generalised-datastore/utils/functions",[["generate_random_string",["generate_random_string"],function(v){generate_random_string=v}]]);_5cd‍.w("../ds/conn",[["EVENTS",["EVENTS"],function(v){EVENTS=v}],["PURCHASED_TICKETS",["PURCHASED_TICKETS"],function(v){PURCHASED_TICKETS=v}],["TICKETS",["TICKETS"],function(v){TICKETS=v}],["VENDOR_EVENTS",["VENDOR_EVENTS"],function(v){VENDOR_EVENTS=v}]]);_5cd‍.w("./utils",[["save_image",["save_image"],function(v){save_image=v}]]);



const create_event = (req, res) => {
  let event = req.body;

  event.images = event.images.map((img) => {
    img.url = save_image(img.url);

    return img;
  });
  let result = EVENTS.write(event);
  event._id = result._id;
  event.created = result.created;

  event._id && VENDOR_EVENTS.write({ event: event._id, vendor: event.vendor });

  res.json({
    ok: true,
    message: "event created",
    data: event,
  });
};

const vendor_events = (req, res) => {
  let { vendor } = req.body;

  res.json({
    ok: true,
    message: "vouchers",
    data: VENDOR_EVENTS.read({ vendor }),
  });
};

const events = (req, res) => {
  let { limit, skip } = req.body;

  let events_ = EVENTS.read(null, { limit: Number(limit), skip: Number(skip) });

  res.json({ ok: true, message: "events", data: { events: events_ } });
};

const ticket_purchased = (req, res) => {
  let details = req.body;

  let ticket_code = generate_random_string(6, "alpha").toUpperCase();
  while (PURCHASED_TICKETS.readone({ ticket_code }))
    ticket_code = generate_random_string(6, "alpha").toUpperCase();

  let result = PURCHASED_TICKETS.write({
    ...details,
    ticket_code,
  });

  let event = EVENTS.update(
    { _id: details.event, vendor: details.vendor },
    {
      total_sales: { $inc: 1 },
      quantity: { $dec: 1 },
    }
  );
};


