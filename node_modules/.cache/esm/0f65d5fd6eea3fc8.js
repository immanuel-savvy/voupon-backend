let axios,_id,OFFER_VOUCHERS,OPEN_VOUCHERS,PURCHASED_VOUCHERS,REDEEMED_VOUCHERS,TRANSACTIONS,USERS,USER_VOUCHERS,VENDORS,VOUCHERS,COMMENTS,WALLETS,generate_random_string,shuffle_array,paystack_secret_key,voucher_otp_email,voucher_purchased_email,voucher_redeemed_email,send_mail,save_image,save_video;_6ee‍.x([["get_offer_vouchers",()=>get_offer_vouchers],["create_offer_voucher",()=>create_offer_voucher],["create_open_voucher",()=>create_open_voucher],["offer_vouchers",()=>offer_vouchers],["verify_voucher",()=>verify_voucher],["open_vouchers",()=>open_vouchers],["voucher_purchased",()=>voucher_purchased],["user_vouchers",()=>user_vouchers],["redeem_voucher",()=>redeem_voucher],["can_redeem_voucher",()=>can_redeem_voucher],["request_voucher_otp",()=>request_voucher_otp],["transfer_voucher",()=>transfer_voucher],["close_voucher",()=>close_voucher],["use_voucher",()=>use_voucher]]);_6ee‍.w("axios",[["default",["axios"],function(v){axios=v}]]);_6ee‍.w("generalised-datastore/utils/functions",[["_id",["_id"],function(v){_id=v}]]);_6ee‍.w("../ds/conn",[["OFFER_VOUCHERS",["OFFER_VOUCHERS"],function(v){OFFER_VOUCHERS=v}],["OPEN_VOUCHERS",["OPEN_VOUCHERS"],function(v){OPEN_VOUCHERS=v}],["PURCHASED_VOUCHERS",["PURCHASED_VOUCHERS"],function(v){PURCHASED_VOUCHERS=v}],["REDEEMED_VOUCHERS",["REDEEMED_VOUCHERS"],function(v){REDEEMED_VOUCHERS=v}],["TRANSACTIONS",["TRANSACTIONS"],function(v){TRANSACTIONS=v}],["USERS",["USERS"],function(v){USERS=v}],["USER_VOUCHERS",["USER_VOUCHERS"],function(v){USER_VOUCHERS=v}],["VENDORS",["VENDORS"],function(v){VENDORS=v}],["VOUCHERS",["VOUCHERS"],function(v){VOUCHERS=v}],["COMMENTS",["COMMENTS"],function(v){COMMENTS=v}],["WALLETS",["WALLETS"],function(v){WALLETS=v}]]);_6ee‍.w("../functions",[["generate_random_string",["generate_random_string"],function(v){generate_random_string=v}],["shuffle_array",["shuffle_array"],function(v){shuffle_array=v}]]);_6ee‍.w("./admin",[["paystack_secret_key",["paystack_secret_key"],function(v){paystack_secret_key=v}]]);_6ee‍.w("./emails",[["voucher_otp_email",["voucher_otp_email"],function(v){voucher_otp_email=v}],["voucher_purchased_email",["voucher_purchased_email"],function(v){voucher_purchased_email=v}],["voucher_redeemed_email",["voucher_redeemed_email"],function(v){voucher_redeemed_email=v}]]);_6ee‍.w("./users",[["send_mail",["send_mail"],function(v){send_mail=v}]]);_6ee‍.w("./utils",[["save_image",["save_image"],function(v){save_image=v}],["save_video",["save_video"],function(v){save_video=v}]]);
























const voucher_otp = new Object();

const create_offer_voucher = (req, res) => {
  let voucher = req.body;

  voucher.images = voucher.images.map((img) => {
    img.url = save_image(img.url);

    return img;
  });
  let result = OFFER_VOUCHERS.write(voucher);
  voucher._id = result._id;
  voucher.created = result.created;

  res.json({
    ok: true,
    message: "offer voucher",
    data: voucher,
  });
};

const offer_vouchers = (req, res) => {
  let { vendor } = req.params;

  res.json({
    ok: true,
    message: "vouchers",
    data: OFFER_VOUCHERS.read({ vendor }),
  });
};

const open_vouchers = (req, res) => {
  let { user } = req.params;

  res.json({
    ok: true,
    message: "vouchers",
    data: OPEN_VOUCHERS.read({ user }),
  });
};

const get_offer_vouchers = (req, res) => {
  let { limit } = req.params;

  let vendors = VENDORS.read();
  let vouchers = new Array();
  vendors.map((vendor) =>
    vouchers.push(
      ...OFFER_VOUCHERS.read({
        vendor: vendor._id,
        duration: { $gt: Date.now() },
        quantities: { $gt: 0 },
      })
    )
  );

  shuffle_array(vouchers);

  let n = new Object();
  vendors.map((v) => (n[v._id] = v));
  res.json({
    ok: true,
    message: "offer vouchers",
    data: { vendors: n, vouchers },
  });
};

const voucher_purchased = (req, res) => {
  let details = req.body;

  let voucher_code = generate_random_string(6, "alpha").toUpperCase();
  while (PURCHASED_VOUCHERS.readone({ voucher_code }))
    voucher_code = generate_random_string(6, "alpha").toUpperCase();

  let result = PURCHASED_VOUCHERS.write({
    ...details,
    voucher_code,
  });

  let offer_voucher = OFFER_VOUCHERS.update(
    { _id: details.voucher, vendor: details.vendor },
    {
      total_sales: { $inc: 1 },
      quantities: { $dec: 1 },
    }
  );

  delete offer_voucher.total_sales;
  delete offer_voucher.quantities;

  offer_voucher.offer_voucher = offer_voucher._id;
  offer_voucher.user = details.user;

  delete offer_voucher._id;
  delete offer_voucher.created;
  delete offer_voucher.updated;

  offer_voucher.email = details.email;
  let voucher = VOUCHERS.write(offer_voucher);
  details.voucher = voucher._id;

  USER_VOUCHERS.write({
    voucher: details.voucher,
    user: details.user,
    email: details.email,
    voucher_code,
    state: "unused",
  });

  let tx = {
    voucher: details.voucher,
    user: details.user,
    type: "voucher",
    title: "voucher purchased",
    vendor: details.vendor,
    voucher_code,
    value: offer_voucher.value,
    credit: true,
  };

  TRANSACTIONS.write(tx);

  send_mail({
    recipient: details.email,
    recipient_name: `${details.firstname} ${details.lastname}`,
    subject: "[Voucher Africa] Voucher Purchased",
    sender: "signup@udaralinksapp.com",
    sender_name: "Voupon",
    sender_pass: "signupudaralinks",
    html: voucher_purchased_email({ ...details, voucher_code }),
  });

  res.json({
    ok: true,
    message: "voucher purchased",
    data: { voucher_code, _id: result._id, created: result.created },
  });
};

const create_open_voucher = (req, res) => {
  let details = req.body;

  let voucher_code = generate_random_string(6, "alpha").toUpperCase();

  details.voucher_code = voucher_code;
  let result = VOUCHERS.write(details);
  details._id = result._id;
  details.created = result.created;

  result = OPEN_VOUCHERS.write({
    voucher: details._id,
    user: details.user,
    voucher_code,
  });
  result = {
    _id: result._id,
    created: result.created,
    voucher: details,
    voucher_code,
    user: details.user,
  };

  send_mail({
    recipient: details.email,
    recipient_name: `${details.firstname} ${details.lastname}`,
    subject: "[Voucher Africa] Voucher Purchased",
    sender: "signup@udaralinksapp.com",
    sender_name: "Voupon",
    sender_pass: "signupudaralinks",
    html: voucher_purchased_email({ ...details, voucher_code }),
  });

  res.json({
    ok: true,
    message: "open voucher",
    data: result,
  });
};

const user_vouchers = (req, res) => {
  let { user } = req.params;

  let open_vouchers = OPEN_VOUCHERS.read({ user }),
    offer_vouchers = USER_VOUCHERS.read({ user });

  res.json({
    ok: true,
    message: "user vouchers",
    data: { open_vouchers, offer_vouchers },
  });
};

const can_redeem_voucher = (req, res) => {
  let { voucher_code, vendor, email, amount, user, voucher_type } = req.body;

  if (!user && !email) {
    return res.json({ ok: true, data: { message: "Incomplete details" } });
  }
  if (!user && email) {
    user = USERS.readone({ email });
    if (!user)
      return res.json({ ok: true, data: { message: "User not found" } });

    user = user._id;
  }

  if (!new Array("open voucher", "offer voucher").includes(voucher_type))
    return res.json({
      ok: false,
      data: { message: "Voucher type is invalid" },
    });

  let voucher = (
    voucher_type === "offer voucher" ? USER_VOUCHERS : OPEN_VOUCHERS
  ).readone({ user, voucher_code });

  if (!voucher)
    return res.json({
      ok: false,
      message: "cannot redeem voucher",
      data: { message: "Voucher not found" },
    });

  if (voucher_type === "offer voucher") {
    if (vendor && voucher.voucher.vendor._id !== vendor) {
      return res.json({
        ok: false,
        data: { message: "Voucher does not belong to vendor." },
      });
    }

    if (voucher.state !== "unused")
      return res.json({
        ok: false,
        data: { message: `Voucher has already been ${voucher.state}` },
      });
  } else {
    if (voucher.voucher.value <= 0)
      return res.json({
        ok: false,
        data: { message: "Voucher has no balance" },
      });
    if (Number(amount) > 0 && voucher.voucher.value < Number(amount))
      return res.json({
        ok: true,
        data: {
          message: `Voucher has insufficient balance, Available balance is - ${voucher.voucher.value}`,
        },
      });
    if (voucher.state && voucher.state !== "unused") {
      return res.json({
        ok: false,
        data: { message: `Voucher has already been ${voucher.state}` },
      });
    }
  }

  res.json({
    ok: true,
    message: "can redeem voucher",
    data: {
      can_redeem: true,
      owner_voucher: voucher._id,
      user: voucher.user,
      voucher: voucher.voucher._id,
      email,
      voucher_type,
      voucher_code: voucher.voucher_code,
      voucher_details: voucher,
    },
  });
};

const redeem_voucher = (req, res) => {
  let details = req.body;

  let { voucher_code, voucher_type, otp, bank, account_number, user, voucher } =
    details;

  voucher = (
    voucher_type === "open voucher" ? OPEN_VOUCHERS : USER_VOUCHERS
  ).readone({ _id: voucher, user });

  if (Number(otp) !== Number(voucher_otp[voucher._id]))
    return res.json({
      ok: false,
      message: "voucher otp incorrect",
      data: { message: "voucher otp invalid" },
    });
  delete voucher_otp[voucher._id];

  let reference = generate_random_string(20, "alnum");

  let { _id } = voucher;
  let { firstname, lastname, email } = USERS.readone(user);

  voucher = voucher.voucher;
  let { value } = voucher;
  if (!voucher) return res.json({ ok: false });

  if (!email) {
    email = USERS.readone(user);
    email = email && email.email;
    if (!email)
      return res.json({ ok: false, data: { message: "Email not found" } });
  }

  axios({
    url: "https://api.paystack.co/transferrecipient",
    method: "post",
    headers: {
      Authorization: `Bearer ${paystack_secret_key}`,
      "Content-Type": "application/json",
    },
    data: {
      type: "nuban",
      name: `${firstname} ${lastname}`,
      account_number,
      bank_code: bank,
      currency: "NGN",
    },
  })
    .then((result) => {
      result = result.data;

      let recipient = result.data.recipient_code;

      axios({
        url: "https://api.paystack.co/transfer",
        method: "post",
        headers: {
          Authorization: `Bearer ${paystack_secret_key}`,
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        data: {
          source: "balance",
          amount: Number(value) * 100,
          recipient,
        },
      })
        .then((result) => {
          result = result.data;

          if (voucher_type === "open voucher")
            VOUCHERS.update(voucher._id, { redeemed: true, state: "redeemed" });
          (voucher_type === "offer voucher"
            ? USER_VOUCHERS
            : OPEN_VOUCHERS
          ).update({ user, _id }, { state: "redeemed" });
          REDEEMED_VOUCHERS.write({
            voucher: voucher._id,
            transfer_details: {
              recipient,
              reference: result.data.reference,
              transfer_code: result.data.transfer_code,
              reference,
              email,
            },
            transfer_status: null,
          });

          let tx = {
            voucher: _id,
            type: "voucher",
            user,
            title: "voucher redeemed",
            vendor: voucher.vendor,
            voucher_code: voucher_code,
            value,
            credit: true,
          };

          TRANSACTIONS.write(tx);

          send_mail({
            recipient: email,
            recipient_name: `${firstname} ${lastname}`,
            subject: "[Voucher Africa] Voucher Redeemed",
            sender: "signup@udaralinksapp.com",
            sender_name: "Voupon",
            sender_pass: "signupudaralinks",
            html: voucher_redeemed_email({ ...details, voucher_code }),
          });

          res.json({
            ok: true,
            message: "voucher redeemed",
            data: { voucher: _id },
          });
        })
        .catch((err) => _6ee‍.g.console.log(err, "HERE"));
    })
    .catch((err) => _6ee‍.g.console.log(err, "H#$#"));
};

const request_voucher_otp = (req, res) => {
  let { voucher, voucher_code, user, voucher_type, email } = req.body;

  if (!user && email) {
    user = USERS.readone({ email });
    user = user && user._id;

    if (!user) return res.json({ ok: false, message: "User not found" });
  } else if (!email && user) email = USERS.readone(user).email;

  let code = generate_random_string(6, "num");
  voucher = (
    voucher_type === "open voucher" ? OPEN_VOUCHERS : USER_VOUCHERS
  ).readone({ user, voucher_code });

  if (!voucher) return res.json({ ok: false });

  voucher_otp[voucher._id] = Number(code);

  let { _id } = voucher;
  let { firstname, lastname } = USERS.readone(user);

  if (!email) {
    email = USERS.readone(user);
    email = email && email.email;
    if (!email)
      return res.json({ ok: false, data: { message: "Email not found" } });
  }

  send_mail({
    recipient: email,
    recipient_name: `${firstname} ${lastname}`,
    subject: "[Voucher Africa] Voucher OTP",
    sender: "signup@udaralinksapp.com",
    sender_name: "Voupon",
    sender_pass: "signupudaralinks",
    html: voucher_otp_email({ ...voucher, code }),
  });

  res.json({
    ok: true,
    message: "voucher otp sent",
    data: { voucher: _id, email, user },
  });
};

const transfer_voucher = (req, res) => {
  let details = req.body;

  let { otp, email2, user, owner, voucher_type, voucher } = details;

  if (Number(otp) !== Number(voucher_otp[voucher]))
    return res.json({
      ok: true,
      message: "voucher otp verification",
      data: { message: "Invalid OTP code" },
    });

  let Voucher =
    voucher_type === "offer voucher" ? USER_VOUCHERS : OPEN_VOUCHERS;
  let user_voucher = Voucher.remove({ _id: voucher, user: owner });

  user_voucher.user = user;
  Voucher.write(user_voucher);

  voucher_type === "open voucher" &&
    VOUCHERS.update(user_voucher.voucher, { email: email2, user });

  res.json({
    ok: true,
    message: "transfer voucher",
    data: {
      voucher,
      transferred: true,
    },
  });
};

const verify_voucher = (req, res) => {
  let { email, voucher_code, user, voucher_type } = req.body;
  user = user || USERS.readone({ email: email.toLowerCase() });

  user = (user && user._id) || user;

  let voucher = (
    voucher_type === "offer voucher" ? USER_VOUCHERS : OPEN_VOUCHERS
  ).readone({ user, voucher_code });

  res.json({
    ok: true,
    message: "verifying voucher",
    data: voucher
      ? {
          state: voucher.state || "unused",
          voucher: { ...voucher, user: USERS.readone(voucher.user) },
          _id: voucher._id,
        }
      : { message: "Voucher not found" },
  });
};

const close_voucher = (req, res) => {
  let { voucher, vendor } = req.body;

  let result = OFFER_VOUCHERS.update(
    { _id: voucher, vendor },
    { state: "closed" }
  );

  res.json({
    ok: true,
    message: "offer closed",
    data: { voucher: result && result._id },
  });
};

const use_voucher = (req, res) => {
  let { vendor, voucher, value, user } = req.body;

  voucher = (
    voucher.startsWith("user") ? USER_VOUCHERS : OPEN_VOUCHERS
  ).readone({ _id: voucher, user });

  vendor = VENDORS.readone(vendor);

  value = Number(
    voucher.voucher.vendor ? Number(voucher.voucher.value) : value
  );

  WALLETS.update(vendor.wallet, { vouchers: { $inc: value } });

  let tx = {
    wallet: vendor.wallet,
    voucher: voucher._id,
    customer: user,
    type: "voucher",
    title: "voucher used",
    vendor: vendor._id,
    voucher_code: voucher.voucher_code,
    value,
    credit: true,
  };

  TRANSACTIONS.write(tx);
  delete tx.wallet;
  tx.user = user;
  tx.credit = false;
  TRANSACTIONS.write(tx);

  if (voucher.voucher.vendor) {
    USER_VOUCHERS.update({ user, _id: voucher._id }, { state: "used" });

    VOUCHERS.update(voucher.voucher._id, { state: "used" });
  } else {
    VOUCHERS.update(voucher.voucher._id, { value: { $dec: value } });
  }

  res.json({
    ok: true,
    data: { success: true, voucher, vendor, user: USERS.readone(user) },
  });
};

















