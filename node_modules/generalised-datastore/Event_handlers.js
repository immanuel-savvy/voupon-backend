"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var Event_listeners = /*#__PURE__*/_createClass(function Event_listeners() {
  var _this = this;
  _classCallCheck(this, Event_listeners);
  _defineProperty(this, "read_listeners", new Set());
  _defineProperty(this, "write_listeners", new Set());
  _defineProperty(this, "update_listeners", new Set());
  _defineProperty(this, "remove_listeners", new Set());
  _defineProperty(this, "replace_listeners", new Set());
  _defineProperty(this, "query_listeners", new Set());
  _defineProperty(this, "folder_listeners", new Set());
  _defineProperty(this, "event_listeners", new Object());
  _defineProperty(this, "listener_add_listeners", new Set());
  _defineProperty(this, "listener_removed_listeners", new Set());
  _defineProperty(this, "read_file_listeners", new Set());
  _defineProperty(this, "write_file_listeners", new Set());
  _defineProperty(this, "get_listeners_package", function () {
    return new Object({
      read_listeners: _this.read_listeners,
      write_listeners: _this.write_listeners,
      update_listeners: _this.update_listeners,
      remove_listeners: _this.remove_listeners,
      replace_listeners: _this.replace_listeners,
      query_listeners: _this.query_listeners,
      folder_listeners: _this.folder_listeners,
      listener_add_listeners: _this.listener_add_listeners,
      listener_removed_listeners: _this.listener_removed_listeners,
      read_file_listeners: _this.read_file_listeners,
      write_file_listeners: _this.write_file_listeners
    });
  });
  _defineProperty(this, "on_user_query_listener", function (query, listener, remove) {
    if (!_this.user_queries.has(query) && remove) return console.error("".concat(query, " does not exist as a user query."));else if (!_this.user_queries.has(query) && Object.keys(_this).includes(query)) return console.error("".concat(query, " already exists as predefined."));
    if (remove) _this["".concat(query, "_listeners")]["delete"](listener);
    if (typeof listener === "function") _this["".concat(query, "_listeners")].add(listener);else console.error("on_custom_query_listener: ".concat(query, " : Listener is not a function"));
  });
  _defineProperty(this, "on_read_file", function (listener, remove) {
    if (remove) return _this.read_file_listeners["delete"](listener);
    if (typeof listener === "function") _this.read_file_listeners.add(listener);else console.error("on_read_file: Listener is not a function");
  });
  _defineProperty(this, "on_write_file", function (listener, remove) {
    if (remove) return _this.write_file_listeners["delete"](listener);
    if (typeof listener === "function") _this.write_file_listeners.add(listener);else console.error("on_write_file: Listener is not a function");
  });
  _defineProperty(this, "on_listener_added", function (listener, remove) {
    if (remove) return _this.listener_add_listeners["delete"](listener);
    if (typeof listener === "function") _this.listener_add_listeners.add(listener);else console.error("on_listener_added: Listener is not a function");
  });
  _defineProperty(this, "on_listener_removed", function (listener, remove) {
    if (remove) return _this.listener_removed_listeners["delete"](listener);
    if (typeof listener === "function") _this.listener_removed_listeners.add(listener);else console.error("on_listener_removed: Listener is not a function");
  });
  _defineProperty(this, "add_folder_listener", function (listener) {
    if (typeof listener === "function") _this.folder_listeners.add(listener);else console.error("add_folder_listener: Listener is not a function");
  });
  _defineProperty(this, "add_query_listener", function (listener) {
    if (typeof listener === "function") _this.query_listeners.add(listener);else console.error("add_query_listener: Listener is not a function");
  });
  _defineProperty(this, "add_read_listener", function (listener) {
    if (typeof listener === "function") _this.read_listeners.add(listener);else console.error("add_read_listener: Listener is not a function");
  });
  _defineProperty(this, "add_write_listener", function (listener) {
    if (typeof listener === "function") _this.write_listeners.add(listener);else console.error("add_write_listener: Listener is not a function");
  });
  _defineProperty(this, "add_update_listener", function (listener) {
    if (typeof listener === "function") _this.update_listeners.add(listener);else console.error("add_update_listener: Listener is not a function");
  });
  _defineProperty(this, "add_remove_listener", function (listener) {
    if (typeof listener === "function") _this.remove_listeners.add(listener);else console.error("add_remove_listener: Listener is not a function");
  });
  _defineProperty(this, "add_replace_listener", function (listener) {
    if (typeof listener === "function") _this.folder_listeners.add(listener);else console.error("add_folder_listener: Listener is not a function");
  });
  _defineProperty(this, "remove_read_listener", function (listener) {
    return listener === true ? _this.read_listeners.clear() : _this.read_listeners["delete"](listener);
  });
  _defineProperty(this, "remove_write_listener", function (listener) {
    return listener === true ? _this.write_listeners.clear() : _this.write_listeners["delete"](listener);
  });
  _defineProperty(this, "remove_update_listener", function (listener) {
    return listener === true ? _this.update_listeners.clear() : _this.update_listeners["delete"](listener);
  });
  _defineProperty(this, "remove_remove_listener", function (listener) {
    return listener === true ? _this.remove_listeners.clear() : _this.remove_listeners["delete"](listener);
  });
  _defineProperty(this, "remove_replace_listener", function (listener) {
    return listener === true ? _this.replace_listeners.clear() : _this.replace_listeners["delete"](listener);
  });
  _defineProperty(this, "remove_folder_listener", function (listener) {
    return listener === true ? _this.folder_listeners.clear() : _this.folder_listeners["delete"](listener);
  });
  _defineProperty(this, "remove_query_listener", function (listener) {
    return listener === true ? _this.query_listeners.clear() : _this.query_listeners["delete"](listener);
  });
  _defineProperty(this, "add_listener", function (event, listener) {
    var listeners = _this.event_listeners[event];
    if (listeners) listeners.add(listener);else listeners = new Set([listener]);
    _this.event_listeners[event] = listeners;
  });
  _defineProperty(this, "emit", function (event, payload, callback) {
    var listeners = _this.event_listeners[event];
    if (!listeners) return;
    var returns = new Array();
    listeners.forEach(function (listener) {
      return returns.push(listener(payload, _this));
    });
    typeof callback === "function" && callback(returns);
  });
  _defineProperty(this, "remove_listener", function (event, listener) {
    var listeners = _this.event_listeners[event];
    if (!listeners) return;
    var res = listeners["delete"](listener);
    _this.event_listeners[event] = listeners;
    return res;
  });
  _defineProperty(this, "remove_event", function (event) {
    delete _this.event_listeners[event];
  });
});
var _default = Event_listeners;
exports["default"] = _default;
