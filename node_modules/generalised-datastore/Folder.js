"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _Folder_crud2 = _interopRequireDefault(require("./Folder_crud"));
var _functions = require("./utils/functions");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var Folder = /*#__PURE__*/function (_Folder_crud) {
  _inherits(Folder, _Folder_crud);
  var _super = _createSuper(Folder);
  function Folder(folder_name, ds, subfolder) {
    var _this;
    _classCallCheck(this, Folder);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "add_query", function (query, handler) {
      if (!_this.user_queries.has(query) && Object.keys(_assertThisInitialized(_this)).includes(query)) return console.error("".concat(query, " already exists as predefined."));
      if (typeof handler !== "function") return console.error("add_query: handler is not a function: ".concat(query));else if (typeof query !== "string") return console.error("add_query: query is not a string");else if (_this.system_query.has(query)) return console.error("add_query: Cannot overwrite a system query - ".concat(query));
      _this.user_queries.add(query);
      _this[query] = function (args) {
        var _arguments = arguments,
          _this2 = this;
        var response = handler(args);
        this.query_listeners.forEach(function (listener) {
          return listener(_this2, response, _objectSpread(_objectSpread({}, _arguments), {}, {
            query_operation: query
          }));
        });
        this.ds.query_listeners.forEach(function (listener) {
          return listener(_this2, response, _objectSpread(_objectSpread({}, _arguments), {}, {
            query_operation: query
          }));
        });
        return response;
      };
    });
    _defineProperty(_assertThisInitialized(_this), "remove_query", function (query) {
      if (!_this.user_queries.has(query)) return console.error("".concat(query, " does not exist as a custom query."));
      if (typeof query !== "string") return console.error("remove_query: query is not a string");else if (_this.system_query.has(query)) return console.error("remove_query: Cannot remove a system query - ".concat(query));
      _this.user_queries["delete"](query);
      delete _this[query];
    });
    _defineProperty(_assertThisInitialized(_this), "run_on_read_file", function (file, meta) {
      var file_ = file,
        history = new Array({
          index: 0
        });
      var listeners = Array.from(_this.read_file_listeners);
      listeners.push.apply(listeners, _toConsumableArray(Array.from(_this.ds.read_file_listeners)));
      for (var l = 0; l < listeners.length; l++) {
        var handler = listeners[l];
        file_ = handler(_assertThisInitialized(_this), file_, meta, history) || file_;
        history.push({
          file: file_,
          handler: handler,
          index: l
        });
      }
      return file_;
    });
    _defineProperty(_assertThisInitialized(_this), "run_on_write_file", function (data, meta) {
      var data_ = data,
        history = new Array({
          index: 0
        });
      var listeners = Array.from(_this.write_file_listeners);
      listeners.push.apply(listeners, _toConsumableArray(Array.from(_this.ds.write_file_listeners)));
      for (var l = 0; l < listeners.length; l++) {
        var handler = listeners[l];
        data_ = handler(_assertThisInitialized(_this), data_, meta, history) || data_;
        history.push({
          data: data_,
          handler: handler,
          index: l
        });
      }
      return data_;
    });
    _defineProperty(_assertThisInitialized(_this), "run_write_listeners", function (response, meta) {
      _this.write_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, meta);
      });
      _this.ds.write_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, meta);
      });
      _this.query_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, _objectSpread(_objectSpread({}, meta), {}, {
          query_operation: "write"
        }));
      });
      _this.ds.query_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, _objectSpread(_objectSpread({}, meta), {}, {
          query_operation: "write"
        }));
      });
    });
    _defineProperty(_assertThisInitialized(_this), "run_read_listeners", function (response, meta) {
      _this.read_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, meta);
      });
      _this.ds.read_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, meta);
      });
      _this.query_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, _objectSpread(_objectSpread({}, meta), {}, {
          query_operation: "read"
        }));
      });
      _this.ds.query_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, _objectSpread(_objectSpread({}, meta), {}, {
          query_operation: "read"
        }));
      });
    });
    _defineProperty(_assertThisInitialized(_this), "run_update_listeners", function (response, meta) {
      _this.update_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, meta);
      });
      _this.ds.update_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, meta);
      });
      _this.query_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, _objectSpread(_objectSpread({}, meta), {}, {
          query_operation: "update"
        }));
      });
      _this.ds.query_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, _objectSpread(_objectSpread({}, meta), {}, {
          query_operation: "update"
        }));
      });
    });
    _defineProperty(_assertThisInitialized(_this), "run_remove_listeners", function (response, meta) {
      _this.remove_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, meta);
      });
      _this.ds.remove_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, meta);
      });
      _this.query_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, _objectSpread(_objectSpread({}, meta), {}, {
          query_operation: "remove"
        }));
      });
      _this.ds.query_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, _objectSpread(_objectSpread({}, meta), {}, {
          query_operation: "remove"
        }));
      });
    });
    _defineProperty(_assertThisInitialized(_this), "run_replace_listeners", function (response, meta) {
      _this.replace_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, meta);
      });
      _this.ds.replace_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, meta);
      });
      _this.query_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, _objectSpread(_objectSpread({}, meta), {}, {
          query_operation: "replace"
        }));
      });
      _this.ds.query_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this), response, _objectSpread(_objectSpread({}, meta), {}, {
          query_operation: "replace"
        }));
      });
    });
    _defineProperty(_assertThisInitialized(_this), "read_config", function () {
      if (_this.config) _this.config.joins = _construct(Array, _toConsumableArray(_this.joins));
      if (_this.config) return _this.config;
      _this.folder_config_path = "".concat(_this.folder_path, "/.config");
      try {
        _this.config = _this.fs.readFileSync(_this.folder_config_path, {
          encoding: "utf8"
        });
      } catch (e) {
        return _this.set_config();
      }
      if (_this.config && typeof _this.config === "string") {
        _this.config = JSON.parse(_this.config);
        if (_this.joins.length) _this.config.joins = _construct(Array, _toConsumableArray(_this.joins));else _this.joins = _this.config.joins;
      } else _this.set_config();
    });
    _defineProperty(_assertThisInitialized(_this), "persist_config", function () {
      return _this.fs.writeFileSync(_this.folder_config_path, JSON.stringify(_this.config), {
        encoding: "utf8"
      });
    });
    _defineProperty(_assertThisInitialized(_this), "set_config", function () {
      _this.folder_config_path = "".concat(_this.folder_path, "/.config");
      var config = {
        folder_name: _this.folder_name,
        folder_path: _this.folder_path,
        ds: _this.ds.ds_name,
        created: Date.now(),
        updated: Date.now(),
        max_filesize: 1048576,
        recent_file: null,
        recent_filesize: 0,
        total_files: 0,
        total_entries: 0,
        total_size: 0,
        joins: _construct(Array, _toConsumableArray(_this.joins)),
        subfolder: _this.subfolder,
        structure: _this.structure
      };
      _this.fs.writeFileSync(_this.folder_config_path, JSON.stringify(config), {
        encoding: "utf8"
      });
      _this.config = config;
    });
    _defineProperty(_assertThisInitialized(_this), "create", function (joins) {
      if (joins && typeof joins === "string") joins = new Array(joins);
      _this.joins = joins || new Array();
      if (_this.fs.existsSync(_this.folder_path)) {
        _this.read_config();
        return _assertThisInitialized(_this);
      }
      _this.fs.mkdirSync(_this.folder_path);
      _this.set_config();
      _this.ds.folder_listeners.forEach(function (listener) {
        return listener(_assertThisInitialized(_this));
      });
      return _assertThisInitialized(_this);
    });
    _this.folder_name = folder_name;
    _this.ds = ds;
    _this.folder_path = "".concat(_this.ds.folders_path, "/").concat(folder_name);
    _this.fs = _this.ds._fs;
    _this.subfolder = subfolder && typeof subfolder === "string" ? new Array(subfolder) : subfolder;
    _this.pages = new Object();
    _this.system_query = new Set(["write", "write_several", "read", "readone", "update", "update_several", "replace", "remove", "remove_several"]);
    _this.user_queries = new Set();
    return _this;
  }
  return _createClass(Folder);
}(_Folder_crud2["default"]);
var _default = Folder;
exports["default"] = _default;
