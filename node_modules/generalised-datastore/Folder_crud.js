"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _Queries2 = _interopRequireDefault(require("./Queries"));
var _functions = require("./utils/functions");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var Folder_crud = /*#__PURE__*/function (_Queries) {
  _inherits(Folder_crud, _Queries);
  var _super = _createSuper(Folder_crud);
  function Folder_crud() {
    var _this;
    _classCallCheck(this, Folder_crud);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "write", function (data, options) {
      if (!data) {
        console.warn("data null - Folder.write");
        return data;
      }
      if (!options) options = new Object();
      var $from_several = options.$from_several;
      delete options.$from_several;
      var $from_replace = options.$from_replace;
      delete options.$from_replace;
      if (Array.isArray(data)) {
        console.warn("Data is an Array; substituting .write_several for you.");
        return _this.write_several(data, options);
      }
      var subfolder = new Array(),
        res;
      if (_this.config.subfolder) {
        _this.config.subfolder.map(function (prop) {
          return data[prop] && subfolder.push(data[prop]);
        });
        for (var s = 0; s < subfolder.length; s++) {
          res = _this.write_to_ds(data, {
            subfolder: subfolder[s]
          });
        }
      } else res = _this.write_to_ds(data, options);
      !$from_several && !$from_replace && _this.run_write_listeners(res, {
        options: options
      });
      return res;
    });
    _defineProperty(_assertThisInitialized(_this), "read", function (query, options) {
      var result = new Array();
      if (Array.isArray(query) && !query.map(function (q) {
        return _typeof(q) === "object" && !Array.isArray(q);
      }).filter(function (p) {
        return !p;
      }).length) {
        for (var r = 0; r < query.length; r++) {
          result.push.apply(result, _toConsumableArray(_this.read(query[r], _objectSpread(_objectSpread({}, options), {}, {
            exclude: result.map(function (r) {
              return r._id;
            })
          }))));
        }
        _this.run_read_listeners(result, {
          options: options,
          query: query,
          several: true
        });
        return result;
      }
      if (typeof query === "string" || Array.isArray(query)) query = {
        _id: query
      };
      if (options && options.subfolder) {
        var subfolder = options.subfolder;
        if (!Array.isArray(subfolder)) subfolder = new Array(subfolder);
        for (var s = 0; s < subfolder.length; s++) {
          result.push.apply(result, _toConsumableArray(_this.read_from_ds(query, _objectSpread(_objectSpread({}, options), {}, {
            subfolder: subfolder[s]
          }))));
        }
      } else result.push.apply(result, _toConsumableArray(_this.read_from_ds(query, options)));
      _this.run_read_listeners(result, {
        options: options,
        query: query,
        several: true
      });
      return result;
    });
    _defineProperty(_assertThisInitialized(_this), "readone", function (query, options) {
      if (!options) options = new Object();
      var result = _this.read(query, _objectSpread(_objectSpread({}, options), {}, {
        limit: 1
      }));
      var response;
      if (options.for_update) response = result;else {
        response = result[0];
        _this.run_read_listeners(response, {
          options: options,
          query: query
        });
      }
      return response;
    });
    _defineProperty(_assertThisInitialized(_this), "write_several", function (data_array, options) {
      if (!data_array) {
        console.warn("data_array null - Folder.write_several");
        return data_array;
      }
      var result = new Array();
      if (!Array.isArray(data_array)) {
        console.warn("Use Data Array instead; substituting .write for you.");
        return _this.write(data_array, _objectSpread(_objectSpread({}, options), {}, {
          $from_several: true
        }));
      } else for (var d = 0; d < data_array.length; d++) {
        result.push(_this.write(data_array[d], _objectSpread(_objectSpread({}, options), {}, {
          $from_several: true
        })));
      }
      _this.run_write_listeners(result, {
        several: true,
        options: options
      });
      return result;
    });
    _defineProperty(_assertThisInitialized(_this), "update", function (query, update_query, options) {
      if (!update_query) {
        console.warn("update_query null");
        return update_query;
      }
      if (typeof query === "string") query = {
        _id: query
      };
      var response = _this.update_in_ds(query, update_query, options);
      _this.run_update_listeners(response, {
        query: query,
        update_query: update_query,
        options: options
      });
      return response;
    });
    _defineProperty(_assertThisInitialized(_this), "update_several", function (query, update_query, options) {
      if (!update_query) {
        console.warn("update_query null");
        return update_query;
      }
      if (Array.isArray(query) || typeof query === "string") query = {
        _id: query
      };
      var response = _this.update_in_ds(query, update_query, _objectSpread(_objectSpread({}, options), {}, {
        several: true
      }));
      _this.run_update_listeners(response, {
        query: query,
        update_query: update_query,
        options: options,
        several: true
      });
      return response;
    });
    _defineProperty(_assertThisInitialized(_this), "search", function (param, object) {
      if (typeof param !== "string") return object;
      param = param.toLowerCase().split(" ");
      return Array.isArray(object) ? object.filter(function (obj) {
        return _this.search_ds(obj, param);
      }) : _this.search_ds(object, param);
    });
    _defineProperty(_assertThisInitialized(_this), "replace", function (replace_query, replacement, options) {
      if (!replacement || !replace_query) {
        console.warn(!replacement ? "replacement null" : "replace_query null");
        return !replace_query ? replace_query : replacement;
      }
      var remove_res = _this.remove_several(replace_query, (0, _functions.copy_object)(options));
      var write_res = _this.write(replacement, _objectSpread(_objectSpread({}, options), {}, {
        return_full: true,
        $from_replace: true
      }));
      var result = _objectSpread(_objectSpread({}, write_res), {}, {
        replaced: true,
        removed: remove_res.data.map(function (r) {
          return r._id;
        }),
        replacement: (0, _functions.copy_object)(write_res.insertion)
      });
      delete result.insertion;
      _this.run_replace_listeners(result, {
        replace_query: replace_query,
        replacement: replacement,
        options: options
      });
      return result;
    });
    _defineProperty(_assertThisInitialized(_this), "remove", function (remove_query, options, no_limit) {
      if (!remove_query) return null;
      if (!options) options = new Object();
      var $from_replace = options.$from_replace;
      delete options.$from_replace;
      var $from_several = options.$from_several;
      delete options.$from_several;
      if (typeof remove_query === "string" || Array.isArray(remove_query)) remove_query = {
        _id: remove_query
      };
      options.limit = no_limit ? -1 : 1;
      var result = new Array();
      if (options.subfolder) {
        if (!Array.isArray(options.subfolder)) options.subfolder = new Array(options.subfolder);
        for (var o = 0; o < options.subfolder.length; o++) {
          var subfolder = options.subfolder[o];
          result.push(_this.remove_from_ds(remove_query, _objectSpread(_objectSpread({}, options), {}, {
            subfolder: subfolder
          })));
        }
        !$from_replace && !$from_several && _this.run_remove_listeners(result, {
          remove_query: remove_query,
          options: options
        });
        return result;
      }
      result = _this.remove_from_ds(remove_query, options, no_limit);
      !$from_replace && !$from_several && _this.run_remove_listeners(result, {
        remove_query: remove_query,
        options: options
      });
      return result;
    });
    _defineProperty(_assertThisInitialized(_this), "remove_several", function (remove_query, options) {
      if (!remove_query) return null;
      var result = _this.remove(remove_query, _objectSpread(_objectSpread({}, options), {}, {
        $from_several: true
      }), true);
      _this.run_remove_listeners(result, {
        remove_query: remove_query,
        options: options
      });
      return result;
    });
    return _this;
  }
  return _createClass(Folder_crud);
}(_Queries2["default"]);
var _default = Folder_crud;
exports["default"] = _default;
